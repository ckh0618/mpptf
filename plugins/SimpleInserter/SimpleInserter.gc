#include <SimpleInserter.hpp>
#include <cstdio>
#include <cstring>
#include <unistd.h>
#include <cassert>


SimpleInserter  :: SimpleInserter () { }

EXEC SQL INCLUDE SQLCA;


void SimpleInserter :: Initialize (int aThreadIndex, int aLoopCount) 
{
    EXEC SQL BEGIN DECLARE SECTION ; 
    char sUserName [MAX_STRING_LEN] ;
    char sPassword [MAX_STRING_LEN] ; 
    char sDSN [MAX_STRING_LEN] ; 
    char sConnName [ MAX_STRING_LEN ];
    EXEC SQL END   DECLARE SECTION ; 

    mThreadIndex = aThreadIndex ;
    mLoopCount = aLoopCount ;


    std::strncpy ( sUserName , "test" , MAX_STRING_LEN );
    std::strncpy ( sPassword , "test" , MAX_STRING_LEN );
    std::strncpy ( sDSN , "DSN=GOLDILOCKS", MAX_STRING_LEN);

    setConnName ( sConnName ) ;

    EXEC SQL AT :sConnName CONNECT :sUserName IDENTIFIED BY :sPassword USING :sDSN; 
    if ( sqlca.sqlcode ) {
        std::printf("Fail to connect : [%s]\n" , sqlca.sqlerrm.sqlerrmc );
    }
}

void SimpleInserter :: Run (int aIndex) 
{
    struct sqlca sqlca; 
    EXEC SQL BEGIN DECLARE SECTION ; 
    int   sValue; 
    char sConnName [ MAX_STRING_LEN ];
    EXEC SQL END   DECLARE SECTION ; 

    setConnName ( sConnName ) ;
    
    sValue = mLoopCount * mThreadIndex + aIndex ;

    EXEC SQL AT :sConnName INSERT INTO TEST_001 VALUES ( :sValue, :sValue) ;

    if ( sqlca.sqlcode ) {
        std::printf("EXEC ERROR : [%s] [%s]\n" , sqlca.sqlerrm.sqlerrmc, sConnName );
        assert ( 0 );
    }
    EXEC SQL AT :sConnName COMMIT ;
  
}

void SimpleInserter :: Finalize () 
{
    struct sqlca sqlca; 

    EXEC SQL BEGIN DECLARE SECTION ; 
    char sConnName [ MAX_STRING_LEN ];
    EXEC SQL END   DECLARE SECTION ; 

    setConnName ( sConnName ) ;

    EXEC SQL AT :sConnName DISCONNECT ;
    if ( sqlca.sqlcode ) {
        std::printf("EXEC ERROR : [%s] [%s]\n" , sqlca.sqlerrm.sqlerrmc, sConnName );
        assert ( 0 );
    }
}


void SimpleInserter :: setConnName ( char * aConnName)
{
    sprintf ( aConnName, "CONN_%d", mThreadIndex);
}
